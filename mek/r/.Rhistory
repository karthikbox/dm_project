count_nocycle_bugs
count_incycle_bugs_files
count_nocycle_bugs_files
thedata <- read.csv("/home/karthik/thesis/graph/dataset/jdt-core-3.0/bugs_cycle.csv", header=T, sep=",")
length(thedata$filename)
sum(thedata$incycle)
sum(thedata$bug)
summary(thedata$bug>0)
count_incycle_bugs=0
count_nocycle_bugs=0
count_incycle_bugs_files=0
count_nocycle_bugs_files=0
for (i in 1:length(thedata$filename)){
if (thedata[i,2]==1){
count_incycle_bugs=count_incycle_bugs+thedata[i,4]
count_incycle_bugs_files=count_incycle_bugs_files+1
}
if (thedata[i,2]==0){
count_nocycle_bugs=count_nocycle_bugs+thedata[i,4]
count_nocycle_bugs_files=count_nocycle_bugs_files+1
}
}
count_incycle_bugs
count_nocycle_bugs
count_incycle_bugs_files
count_nocycle_bugs_files
thedata <- read.csv("/home/karthik/thesis/graph/dataset/jdt-core-3.0/bugs_cycle.csv", header=T, sep=",")
names(thedata)
names(thedata)
random_x=rep(NA,150)
random_y=rep(NA,150)
temp=rep(NA,50)
for(i in 1:150){
for(j in 1:50){
#bug_sum=0
idxs <- sample(1:nrow(thedata), i,F)
temp[j]=sum(thedata[idxs,4)]
}
random_x[i]=mean(temp)
}
idxs <- sample(1:nrow(thedata), i,F)
temp[j]=sum(thedata[idxs,4)]
random_x=rep(NA,150)
random_y=rep(NA,150)
temp=rep(NA,50)
for(i in 1:150){
for(j in 1:50){
#bug_sum=0
idxs <- sample(1:nrow(thedata), i,F)
temp[j]=sum(thedata[idxs,4])
}
random_x[i]=mean(temp)
}
random_x
random_bugs=rep(NA,150)
temp=rep(NA,50)
for(i in 1:150){
for(j in 1:50){
#bug_sum=0
idxs <- sample(1:nrow(thedata), i,F)
temp[j]=sum(thedata[idxs,4])
}
random_bugs[i]=mean(temp)
}
plot(e[,1],e[,2],xlim=c(0,150),ylim=c(0,250),type="b",xlab="cycle size",ylab="#defects",col="blue",main="defects vs cycle size JDT-CORE 3.0",axes=FALSE)
lines(c(1,150),random_bugs,type="b",pch=15,col="red",lwd=1)
length(random_bugs)
c(1,150)
lines(c(1:150),random_bugs,type="b",pch=15,col="red",lwd=1)
plot(e[,1],e[,2],xlim=c(0,150),ylim=c(0,250),type="b",xlab="cycle size",ylab="#defects",col="blue",main="defects vs cycle size JDT-CORE 3.0",axes=FALSE)
lines(c(1:150),random_bugs,type="b",pch=1,col="red",lwd=1)
axis(side=1, at=seq(0,150,by=5))
axis(side=2, at=seq(0, 250, by=10))
box()
abline(h=seq(0,250,by=10),v=seq(0,150,by=5),col="gray",lty=3)
plot(e[,1],e[,2],xlim=c(0,150),ylim=c(0,250),type="b",xlab="cycle size",ylab="#defects",col="blue",main="defects vs cycle size JDT-CORE 3.0",axes=FALSE)
lines(c(1:150:5),random_bugs[c(1:150:5)],type="b",pch=1,col="red",lwd=1)
c(1:150:5)
c(1:150,5)
c(1:5:150)
seq(1,150)
seq(1,150,by=5)
plot(e[,1],e[,2],xlim=c(0,150),ylim=c(0,250),type="b",xlab="cycle size",ylab="#defects",col="blue",main="defects vs cycle size JDT-CORE 3.0",axes=FALSE)
lines(seq(1,150,by=4),random_bugs[seq(1,150,by=4)],type="b",pch=1,col="red",lwd=1)
plot(e[,1],e[,2],xlim=c(0,150),ylim=c(0,250),type="b",xlab="cycle size",ylab="#defects",col="blue",main="defects vs cycle size JDT-CORE 3.0",axes=FALSE)
lines(seq(1,150,by=1),random_bugs[seq(1,150,by=1)],type="b",pch=1,col="red",lwd=1)
plot(e[,1],e[,2],xlim=c(0,150),ylim=c(0,250),type="b",xlab="cycle size",ylab="#defects",col="blue",main="defects vs cycle size JDT-CORE 3.0",axes=FALSE)
lines(seq(1,150,by=1),random_bugs[seq(1,150,by=1)],type="b",pch=1,col="red",lwd=1)
axis(side=1, at=seq(0,150,by=5))
axis(side=2, at=seq(0, 250, by=10))
box()
abline(h=seq(0,250,by=10),v=seq(0,150,by=5),col="gray",lty=3)
thedata <- read.csv("/home/karthik/thesis/graph/dataset/jdt-core-3.0/bugs_cycle.csv", header=T, sep=",")
#random_x=rep(NA,150)
random_bugs=rep(NA,150)
temp=rep(NA,50)
for(i in 1:150){
for(j in 1:50){
#bug_sum=0
idxs <- sample(1:nrow(thedata), i,F)
temp[j]=sum(thedata[idxs,4])
}
random_bugs[i]=mean(temp)
}
plot(e[,1],e[,2],xlim=c(0,150),ylim=c(0,250),type="b",xlab="cycle size",ylab="#defects",col="blue",main="defects vs cycle size JDT-CORE 3.0",axes=FALSE)
a=c(3, 2, 31, 13, 3, 114, 10, 90, 4, 9, 4, 4, 3, 2, 36, 16, 35, 4, 2, 4, 7, 2, 2, 2, 2, 3, 4, 3, 2, 2, 2, 2, 3, 2)
b=c(1, 0, 1, 29, 8, 190, 0, 50, 0, 3, 0, 2, 2, 2, 64, 43, 45, 1, 4, 0, 3, 1, 1, 0, 0, 0, 0, 1, 0, 3, 0, 3, 0, 2)
cor(a,b,method="spearman")
sort(x=a,decreasing=TRUE)
sort(x=b,decreasing=TRUE)
d=data.frame(a,b)
e=d[order(d[,1],decreasing=TRUE),]
e
thedata <- read.csv("/home/karthik/thesis/graph/dataset/jdt-core-3.0/bugs_cycle.csv", header=T, sep=",")
#random_x=rep(NA,150)
random_bugs=rep(NA,150)
temp=rep(NA,50)
for(i in 1:150){
for(j in 1:50){
#bug_sum=0
idxs <- sample(1:nrow(thedata), i,F)
temp[j]=sum(thedata[idxs,4])
}
random_bugs[i]=mean(temp)
}
plot(e[,1],e[,2],xlim=c(0,150),ylim=c(0,250),type="b",xlab="cycle size",ylab="#defects",col="blue",main="defects vs cycle size JDT-CORE 3.0",axes=FALSE)
lines(seq(1,150,by=1),random_bugs[seq(1,150,by=1)],type="b",pch=1,col="red",lwd=1)
#lines(seq(1,150,by=4),random_bugs[seq(1,150,by=4)],type="b",pch=1,col="red",lwd=1)
axis(side=1, at=seq(0,150,by=5))
axis(side=2, at=seq(0, 250, by=10))
box()
abline(h=seq(0,250,by=10),v=seq(0,150,by=5),col="gray",lty=3)
#jdt-2.1
#[3, 2, 80, 11, 3, 81, 30, 24, 47, 4, 2, 12, 4, 34, 4, 2, 3, 2, 7, 2, 10, 2, 2, 2, 2, 2, 2, 4, 2, 456]
#[0, 0, 51, 2, 0, 9, 1, 4, 1, 4, 0, 0, 2, 2, 3, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 26]
a=c(3, 2, 80, 11, 3, 81, 30, 24, 47, 4, 2, 12, 4, 34, 4, 2, 3, 2, 7, 2, 10, 2, 2, 2, 2, 2, 2, 4, 2)
b=c(0, 0, 51, 2, 0, 9, 1, 4, 1, 4, 0, 0, 2, 2, 3, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0)
cor(a,b,method="spearman")
sort(x=a,decreasing=TRUE)
sort(x=b,decreasing=TRUE)
d=data.frame(a,b)
e=d[order(d[,1],decreasing=TRUE),]
e
thedata <- read.csv("/home/karthik/thesis/graph/dataset/jdt-core-2.1/bugs_cycle.csv", header=T, sep=",")
#random_x=rep(NA,150)
random_bugs=rep(NA,150)
temp=rep(NA,50)
for(i in 1:150){
for(j in 1:50){
#bug_sum=0
idxs <- sample(1:nrow(thedata), i,F)
temp[j]=sum(thedata[idxs,4])
}
random_bugs[i]=mean(temp)
}
plot(e[,1],e[,2],xlim=c(0,150),ylim=c(0,250),type="b",xlab="cycle size",ylab="#defects",col="blue",main="defects vs cycle size JDT-CORE 2.1",axes=FALSE)
lines(seq(1,150,by=1),random_bugs[seq(1,150,by=1)],type="b",pch=1,col="red",lwd=1)
axis(side=1, at=seq(0,150,by=5))
axis(side=2, at=seq(0, 250, by=10))
box()
abline(h=seq(0,250,by=10),v=seq(0,150,by=5),col="gray",lty=3)
#jdt2.0
#jdt2.0
#[3, 2, 71, 11, 3, 81, 30, 24, 28, 2, 8, 4, 3, 34, 4, 2, 3, 2, 4, 8, 2, 11, 2, 2, 2, 2, 2, 2, 2, 457]
#[0, 1, 51, 11, 1, 174, 2, 27, 9, 1, 0, 0, 2, 25, 2, 2, 4, 1, 1, 9, 0, 0, 0, 0, 1, 0, 0, 2, 0, 133]
a=c(3, 2, 71, 11, 3, 81, 30, 24, 28, 2, 8, 4, 3, 34, 4, 2, 3, 2, 4, 8, 2, 11, 2, 2, 2, 2, 2, 2, 2)
b=c(0, 1, 51, 11, 1, 174, 2, 27, 9, 1, 0, 0, 2, 25, 2, 2, 4, 1, 1, 9, 0, 0, 0, 0, 1, 0, 0, 2, 0)
cor(a,b,method="spearman")
sort(x=a,decreasing=TRUE)
sort(x=b,decreasing=TRUE)
d=data.frame(a,b)
e=d[order(d[,1],decreasing=TRUE),]
e
thedata <- read.csv("/home/karthik/thesis/graph/dataset/jdt-core-2.1/bugs_cycle.csv", header=T, sep=",")
#random_x=rep(NA,150)
random_bugs=rep(NA,150)
temp=rep(NA,50)
for(i in 1:150){
for(j in 1:50){
#bug_sum=0
idxs <- sample(1:nrow(thedata), i,F)
temp[j]=sum(thedata[idxs,4])
}
random_bugs[i]=mean(temp)
}
a=c(3, 2, 71, 11, 3, 81, 30, 24, 28, 2, 8, 4, 3, 34, 4, 2, 3, 2, 4, 8, 2, 11, 2, 2, 2, 2, 2, 2, 2)
b=c(0, 1, 51, 11, 1, 174, 2, 27, 9, 1, 0, 0, 2, 25, 2, 2, 4, 1, 1, 9, 0, 0, 0, 0, 1, 0, 0, 2, 0)
cor(a,b,method="spearman")
sort(x=a,decreasing=TRUE)
sort(x=b,decreasing=TRUE)
d=data.frame(a,b)
e=d[order(d[,1],decreasing=TRUE),]
e
thedata <- read.csv("/home/karthik/thesis/graph/dataset/jdt-core-2.0/bugs_cycle.csv", header=T, sep=",")
#random_x=rep(NA,150)
random_bugs=rep(NA,150)
temp=rep(NA,50)
for(i in 1:150){
for(j in 1:50){
#bug_sum=0
idxs <- sample(1:nrow(thedata), i,F)
temp[j]=sum(thedata[idxs,4])
}
random_bugs[i]=mean(temp)
}
plot(e[,1],e[,2],xlim=c(0,150),ylim=c(0,250),type="b",xlab="cycle size",ylab="#defects",col="blue",main="defects vs cycle size JDT-CORE 2.0",axes=FALSE)
lines(seq(1,150,by=1),random_bugs[seq(1,150,by=1)],type="b",pch=1,col="red",lwd=1)
axis(side=1, at=seq(0,150,by=5))
axis(side=2, at=seq(0, 250, by=10))
box()
abline(h=seq(0,250,by=10),v=seq(0,150,by=5),col="gray",lty=3)
legend( "bottomright",c("cycle","random"),
lty=c(1,1),
,col=c("blue","random"))
legend( "bottomright",c("cycle","random"),lty=c(1,1),col=c("blue","red"))
a=c(3, 2, 31, 13, 3, 114, 10, 90, 4, 9, 4, 4, 3, 2, 36, 16, 35, 4, 2, 4, 7, 2, 2, 2, 2, 3, 4, 3, 2, 2, 2, 2, 3, 2)
b=c(1, 0, 1, 29, 8, 190, 0, 50, 0, 3, 0, 2, 2, 2, 64, 43, 45, 1, 4, 0, 3, 1, 1, 0, 0, 0, 0, 1, 0, 3, 0, 3, 0, 2)
cor(a,b,method="spearman")
sort(x=a,decreasing=TRUE)
sort(x=b,decreasing=TRUE)
d=data.frame(a,b)
e=d[order(d[,1],decreasing=TRUE),]
e
thedata <- read.csv("/home/karthik/thesis/graph/dataset/jdt-core-3.0/bugs_cycle.csv", header=T, sep=",")
#random_x=rep(NA,150)
random_bugs=rep(NA,150)
temp=rep(NA,50)
for(i in 1:150){
for(j in 1:50){
#bug_sum=0
idxs <- sample(1:nrow(thedata), i,F)
temp[j]=sum(thedata[idxs,4])
}
random_bugs[i]=mean(temp)
}
plot(e[,1],e[,2],xlim=c(0,150),ylim=c(0,250),type="b",xlab="cycle size",ylab="#defects",col="blue",main="defects vs cycle size JDT-CORE 3.0",axes=FALSE)
lines(seq(1,150,by=1),random_bugs[seq(1,150,by=1)],type="b",pch=1,col="red",lwd=1)
#lines(seq(1,150,by=4),random_bugs[seq(1,150,by=4)],type="b",pch=1,col="red",lwd=1)
axis(side=1, at=seq(0,150,by=5))
axis(side=2, at=seq(0, 250, by=10))
box()
abline(h=seq(0,250,by=10),v=seq(0,150,by=5),col="gray",lty=3)
legend( "bottomright",c("cycle","random"),lty=c(1,1),col=c("blue","red"))
#jdt-2.1
#[3, 2, 80, 11, 3, 81, 30, 24, 47, 4, 2, 12, 4, 34, 4, 2, 3, 2, 7, 2, 10, 2, 2, 2, 2, 2, 2, 4, 2, 456]
#[0, 0, 51, 2, 0, 9, 1, 4, 1, 4, 0, 0, 2, 2, 3, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 26]
a=c(3, 2, 80, 11, 3, 81, 30, 24, 47, 4, 2, 12, 4, 34, 4, 2, 3, 2, 7, 2, 10, 2, 2, 2, 2, 2, 2, 4, 2)
b=c(0, 0, 51, 2, 0, 9, 1, 4, 1, 4, 0, 0, 2, 2, 3, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0)
cor(a,b,method="spearman")
sort(x=a,decreasing=TRUE)
sort(x=b,decreasing=TRUE)
d=data.frame(a,b)
e=d[order(d[,1],decreasing=TRUE),]
e
thedata <- read.csv("/home/karthik/thesis/graph/dataset/jdt-core-2.1/bugs_cycle.csv", header=T, sep=",")
#random_x=rep(NA,150)
random_bugs=rep(NA,150)
temp=rep(NA,50)
for(i in 1:150){
for(j in 1:50){
#bug_sum=0
idxs <- sample(1:nrow(thedata), i,F)
temp[j]=sum(thedata[idxs,4])
}
random_bugs[i]=mean(temp)
}
plot(e[,1],e[,2],xlim=c(0,150),ylim=c(0,250),type="b",xlab="cycle size",ylab="#defects",col="blue",main="defects vs cycle size JDT-CORE 2.1",axes=FALSE)
lines(seq(1,150,by=1),random_bugs[seq(1,150,by=1)],type="b",pch=1,col="red",lwd=1)
axis(side=1, at=seq(0,150,by=5))
axis(side=2, at=seq(0, 250, by=10))
box()
legend( "bottomright",c("cycle","random"),lty=c(1,1),col=c("blue","red"))
abline(h=seq(0,250,by=10),v=seq(0,150,by=5),col="gray",lty=3)
#jdt2.0
legend( "topright",c("cycle","random"),lty=c(1,1),col=c("blue","red"))
plot(e[,1],e[,2],xlim=c(0,150),ylim=c(0,250),type="b",xlab="cycle size",ylab="#defects",col="blue",main="defects vs cycle size JDT-CORE 2.1",axes=FALSE)
lines(seq(1,150,by=1),random_bugs[seq(1,150,by=1)],type="b",pch=1,col="red",lwd=1)
axis(side=1, at=seq(0,150,by=5))
axis(side=2, at=seq(0, 250, by=10))
box()
legend( "topright",c("cycle","random"),lty=c(1,1),col=c("blue","red"))
abline(h=seq(0,250,by=10),v=seq(0,150,by=5),col="gray",lty=3)
#jdt-3.0
a=c(3, 2, 31, 13, 3, 114, 10, 90, 4, 9, 4, 4, 3, 2, 36, 16, 35, 4, 2, 4, 7, 2, 2, 2, 2, 3, 4, 3, 2, 2, 2, 2, 3, 2)
b=c(1, 0, 1, 29, 8, 190, 0, 50, 0, 3, 0, 2, 2, 2, 64, 43, 45, 1, 4, 0, 3, 1, 1, 0, 0, 0, 0, 1, 0, 3, 0, 3, 0, 2)
cor(a,b,method="spearman")
sort(x=a,decreasing=TRUE)
sort(x=b,decreasing=TRUE)
d=data.frame(a,b)
e=d[order(d[,1],decreasing=TRUE),]
e
thedata <- read.csv("/home/karthik/thesis/graph/dataset/jdt-core-3.0/bugs_cycle.csv", header=T, sep=",")
#random_x=rep(NA,150)
random_bugs=rep(NA,150)
temp=rep(NA,50)
for(i in 1:150){
for(j in 1:50){
#bug_sum=0
idxs <- sample(1:nrow(thedata), i,F)
temp[j]=sum(thedata[idxs,4])
}
random_bugs[i]=mean(temp)
}
plot(e[,1],e[,2],xlim=c(0,150),ylim=c(0,250),type="b",xlab="cycle size",ylab="#defects",col="blue",main="defects vs cycle size JDT-CORE 3.0",axes=FALSE)
lines(seq(1,150,by=1),random_bugs[seq(1,150,by=1)],type="b",pch=1,col="red",lwd=1)
#lines(seq(1,150,by=4),random_bugs[seq(1,150,by=4)],type="b",pch=1,col="red",lwd=1)
axis(side=1, at=seq(0,150,by=5))
axis(side=2, at=seq(0, 250, by=10))
box()
abline(h=seq(0,250,by=10),v=seq(0,150,by=5),col="gray",lty=3)
legend( "topright",c("cycle","random"),lty=c(1,1),col=c("blue","red"))
#jdt-2.1
#[3, 2, 80, 11, 3, 81, 30, 24, 47, 4, 2, 12, 4, 34, 4, 2, 3, 2, 7, 2, 10, 2, 2, 2, 2, 2, 2, 4, 2, 456]
#[0, 0, 51, 2, 0, 9, 1, 4, 1, 4, 0, 0, 2, 2, 3, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 26]
a=c(3, 2, 80, 11, 3, 81, 30, 24, 47, 4, 2, 12, 4, 34, 4, 2, 3, 2, 7, 2, 10, 2, 2, 2, 2, 2, 2, 4, 2)
b=c(0, 0, 51, 2, 0, 9, 1, 4, 1, 4, 0, 0, 2, 2, 3, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0)
cor(a,b,method="spearman")
sort(x=a,decreasing=TRUE)
sort(x=b,decreasing=TRUE)
d=data.frame(a,b)
e=d[order(d[,1],decreasing=TRUE),]
e
thedata <- read.csv("/home/karthik/thesis/graph/dataset/jdt-core-2.1/bugs_cycle.csv", header=T, sep=",")
#random_x=rep(NA,150)
random_bugs=rep(NA,150)
temp=rep(NA,50)
for(i in 1:150){
for(j in 1:50){
#bug_sum=0
idxs <- sample(1:nrow(thedata), i,F)
temp[j]=sum(thedata[idxs,4])
}
random_bugs[i]=mean(temp)
}
plot(e[,1],e[,2],xlim=c(0,150),ylim=c(0,250),type="b",xlab="cycle size",ylab="#defects",col="blue",main="defects vs cycle size JDT-CORE 2.1",axes=FALSE)
lines(seq(1,150,by=1),random_bugs[seq(1,150,by=1)],type="b",pch=1,col="red",lwd=1)
axis(side=1, at=seq(0,150,by=5))
axis(side=2, at=seq(0, 250, by=10))
box()
legend( "topright",c("cycle","random"),lty=c(1,1),col=c("blue","red"))
abline(h=seq(0,250,by=10),v=seq(0,150,by=5),col="gray",lty=3)
#jdt2.0
#[3, 2, 71, 11, 3, 81, 30, 24, 28, 2, 8, 4, 3, 34, 4, 2, 3, 2, 4, 8, 2, 11, 2, 2, 2, 2, 2, 2, 2, 457]
#[0, 1, 51, 11, 1, 174, 2, 27, 9, 1, 0, 0, 2, 25, 2, 2, 4, 1, 1, 9, 0, 0, 0, 0, 1, 0, 0, 2, 0, 133]
a=c(3, 2, 71, 11, 3, 81, 30, 24, 28, 2, 8, 4, 3, 34, 4, 2, 3, 2, 4, 8, 2, 11, 2, 2, 2, 2, 2, 2, 2)
b=c(0, 1, 51, 11, 1, 174, 2, 27, 9, 1, 0, 0, 2, 25, 2, 2, 4, 1, 1, 9, 0, 0, 0, 0, 1, 0, 0, 2, 0)
cor(a,b,method="spearman")
sort(x=a,decreasing=TRUE)
sort(x=b,decreasing=TRUE)
d=data.frame(a,b)
e=d[order(d[,1],decreasing=TRUE),]
e
thedata <- read.csv("/home/karthik/thesis/graph/dataset/jdt-core-2.0/bugs_cycle.csv", header=T, sep=",")
#random_x=rep(NA,150)
random_bugs=rep(NA,150)
temp=rep(NA,50)
for(i in 1:150){
for(j in 1:50){
#bug_sum=0
idxs <- sample(1:nrow(thedata), i,F)
temp[j]=sum(thedata[idxs,4])
}
random_bugs[i]=mean(temp)
}
plot(e[,1],e[,2],xlim=c(0,150),ylim=c(0,250),type="b",xlab="cycle size",ylab="#defects",col="blue",main="defects vs cycle size JDT-CORE 2.0",axes=FALSE)
lines(seq(1,150,by=1),random_bugs[seq(1,150,by=1)],type="b",pch=1,col="red",lwd=1)
axis(side=1, at=seq(0,150,by=5))
axis(side=2, at=seq(0, 250, by=10))
box()
abline(h=seq(0,250,by=10),v=seq(0,150,by=5),col="gray",lty=3)
legend( "topright",c("cycle","random"),lty=c(1,1),col=c("blue","red"))
thedata <- read.csv("/home/karthik/algorithms/output" , header=F, sep=" ")
thedata <- read.csv("/home/karthik/algorithms/hw1/output.txt" , header=F, sep=" ")
View(thedata)
plot(thedata[,1],thedata[,2])
View(thedata)
thedata <- read.csv("/home/karthik/algorithms/hw1/output.txt" , header=F, sep=" ")
#x_axis=c(0.25KB,0.5KB,1,2,4,8,16,32,64,128,512,1024,2KB,)
plot(len(thedata[,1]),thedata[,2])
plot(length(thedata[,1]),thedata[,2])
length(thedata[,1])
length(thedata[,2])
plot(length(thedata[,1]),thedata[,2])
plot(length(thedata[,1]),thedata[,2]*10^6,xlim=c(1,length(thedata[,1])+5),,ylim=c(thedata[1,2]*10^6-1,thedata[length(thedata[,1]),2]*10^6+4))
length(thedata[,1])
length(thedata[,2])
c(1,length(thedata[,1]))
c(1:length(thedata[,1]))
plot(c(1:length(thedata[,1])),thedata[,2]*10^6,xlim=c(1,length(thedata[,1])+2),ylim=c(thedata[1,2]*10^6-1,thedata[length(thedata[,1]),2]*10^6+4))
thedata <- read.csv("/home/karthik/algorithms/hw1/output.txt" , header=F, sep=" ")
View(thedata)
thedata <- read.csv("/home/karthik/algorithms/hw1/output.txt" , header=F, sep="\t")
View(thedata)
plot(c(1:length(thedata[,1])),thedata[,1]/(1024*1024),xlim=c(1,length(thedata[,1])+2),ylim=(0,1200)
plot(c(1:length(thedata[,1])),thedata[,1]/(1024*1024),xlim=c(1,length(thedata[,1])+2),ylim=(0,1200))
plot(c(1:length(thedata[,1])),thedata[,1]/(1024*1024),xlim=c(1,length(thedata[,1])+2),ylim=(0,1200))
plot(c(1:length(thedata[,1])),thedata[,1]/(1024*1024),xlim=c(1,length(thedata[,1])+2),ylim=(0,1200))
plot(c(1:length(thedata[,1])),thedata[,1]/(1024*1024),xlim=c(1,length(thedata[,1])+2),ylim=(0,1200))
plot(c(1:length(thedata[,1])),thedata[,1]/(1024*1024),xlim=c(1,length(thedata[,1])+2),ylim=c(0,1200))
View(thedata)
thedata <- read.csv("/home/karthik/algorithms/hw1/output.txt" , header=F, sep="\t")
thedata <- read.csv("/home/karthik/algorithms/hw1/output.txt" , header=F, sep=" ")
plot(c(1:length(thedata[,1])),thedata[,1]/(1024*1024),xlim=c(1,length(thedata[,1])+2),ylim=c(0,1200))
plot(c(1:length(thedata[,1])),thedata[,1]*10^6,xlim=c(1,length(thedata[,1])+2),ylim=c(0,5))
plot(c(1:length(thedata[,1])),thedata[,2]*10^6,xlim=c(1,length(thedata[,1])+2),ylim=c(0,5))
plot(c(1:length(thedata[,1])),thedata[,2]*10^8,xlim=c(1,length(thedata[,1])+2),ylim=c(0,5))
View(thedata)
plot(c(1:length(thedata[,1])),thedata[,2]*10^8)
thedata <- read.csv("/home/karthik/Downloads/Untitled spreadsheet - Sheet1.csv" , header=F, sep=",")
View(thedata)
source('~/.active-rstudio-document', echo=TRUE)
thedata <- read.csv("/home/karthik/Downloads/Untitled spreadsheet - Sheet1.csv" , header=TRUE, sep=",")
View(thedata)
plot(thedata[,1],thedata[,2])
plot(thedata[,1],thedata[,2],xlim=c(0,5.5),ylim=c(2.2,9))
plot(thedata[,1],thedata[,2],xlim=c(0,5.5),ylim=c(0,9))
plot(thedata[,1],thedata[,2],xlim=c(1,5.5),ylim=c(0,9))
plot(thedata[,1],thedata[,2],xlim=c(1,5.5),ylim=c(0,9),type="b",xlab="Output Load Capacitance (pF)",ylab="Average Propogation Delay (ns)",col="blue")
plot(thedata[,1],thedata[,2],xlim=c(1,5.5),ylim=c(0,9),type="b",xlab="Output Load Capacitance (pF)",ylab="Average Propogation Delay (ns)",col="blue",title="sdaf")
plot(thedata[,1],thedata[,2],xlim=c(1,5.5),ylim=c(0,9),type="b",xlab="Output Load Capacitance (pF)",ylab="Average Propogation Delay (ns)",col="blue",main="sdaf")
plot(thedata[,1],thedata[,2],xlim=c(1,5.5),ylim=c(0,9),type="b",xlab="Output Load Capacitance (pF)",ylab="Average Propogation Delay (ns)",col="blue",main="")
plot(thedata[,1],thedata[,2],xlim=c(1,5.5),ylim=c(0,9),type="b",xlab="Output Load Capacitance (pF)",ylab="Average Propogation Delay (ns)",col="blue",main="Load vs Propagation delay")
abline(h=seq(1,5,by=1),v=seq(1,5.5,by=1),col="gray",lty=3)
abline(h=seq(1,5,by=1),v=seq(1,9,by=2),col="gray",lty=3)
plot(thedata[,1],thedata[,2],xlim=c(1,5.5),ylim=c(0,9),type="b",xlab="Output Load Capacitance (pF)",ylab="Average Propogation Delay (ns)",col="blue",main="Load vs Propagation delay")
abline(h=seq(1,5,by=2),v=seq(1,9,by=2),col="gray",lty=3)
abline(h=seq(1,6,by=2),v=seq(1,10,by=2),col="gray",lty=3)
plot(thedata[,1],thedata[,2],xlim=c(1,5.5),ylim=c(0,9),type="b",xlab="Output Load Capacitance (pF)",ylab="Average Propogation Delay (ns)",col="blue",main="Load vs Propagation delay")
abline(h=seq(1,6,by=2),v=seq(1,10,by=2),col="gray",lty=3)
abline(h=seq(1,6,by=1),v=seq(1,10,by=1),col="gray",lty=3)
plot(thedata[,1],thedata[,2],xlim=c(1,5.5),ylim=c(0,9),type="b",xlab="Output Load Capacitance (pF)",ylab="Average Propogation Delay (ns)",col="blue",main="Load vs Propagation delay")
abline(h=seq(1,6,by=1),v=seq(2,10,by=2),col="gray",lty=3)
plot(thedata[,1],thedata[,2],xlim=c(1,5.5),ylim=c(0,9),type="b",xlab="Output Load Capacitance (pF)",ylab="Average Propogation Delay (ns)",col="blue",main="Load vs Propagation delay")
abline(h=seq(2,8,by=1),v=seq(1,6,by=1),col="gray",lty=3)
plot(thedata[,1],thedata[,2],xlim=c(1,5.5),ylim=c(0,9),type="b",xlab="Output Load Capacitance (pF)",ylab="Average Propogation Delay (ns)",col="blue",main="Load vs Propagation delay")
abline(h=seq(2,8,by=2),v=seq(1,6,by=1),col="gray",lty=3)
thedata <- read.csv("/home/karthik/yelp/mek/data_generated/yelp_user.csv" , header=TRUE, sep=";")
thedata <- read.csv("/home/karthik/yelp/mek/data_generated/yelp_user.csv" , header=TRUE, sep=";")
View(thedata)
View(thedata)
hist(thedata$review_count)
max(thedata$review_count)
hist(thedata$review_count,freq=false)
hist(thedata$review_count,freq=False)
hist(thedata$review_count,freq=FALSE)
hist(thedata$review_count,freq=FALSE,xlim=c(1:10:1)
)
c(1:10:1)
c(1:10)
c(1:2:10)
hist(thedata$review_count,freq=FALSE,xlim=c(1:10))
hist(thedata$review_count,freq=FALSE,breaks=c(1:10))
c(1:10)
hist(thedata$review_count,freq=TRUE,breaks=8062)
a=hist(thedata$review_count,freq=TRUE,breaks=8062)
a$breaks
a$counts
a=hist(thedata$review_count,freq=TRUE,breaks=8062)
length(thedata$review)
a$counts[1:]
a$counts[1,]
a$counts[1]
a$density
a$density[1]
a=hist(thedata$review_count,freq=TRUE,breaks=8062)
a=hist(thedata$review_count,freq=FALSE,breaks=8062)
a$density[1]
a=hist(thedata$review_count,freq=FALSE,breaks=(8062/500))
a$breaks
a$density[1]
a$density[2]
a$density
a$count
a$density
a$breaks
a$density
a$breaks
a$count
summary(thedata$friend_count)
a=hist(thedata$friend_count,freq=FALSE,breaks=(2918))
a$breaks
a$counts
a$counts[1]
a$break[1]
a$breaks[1]
a$counts[2]
setwd("~/yelp/mek/r")
length(thedata$name)
hist(thedata$review_count)
a=hist(thedata$review_count)
max(thedata$review_count)
a=hist(thedata$review_count,freq=TRUE,breaks=8063)
a$breaks
a$counts
a$counts[1:3,:]
a$counts[1:3,]
a$counts[1:3,]
a$counts[1:3]
a$breaks[1:3]
a$counts[1:3]
View(thedata)
min(thedata$review_count)
summary(thedata$review_count)
a$counts[1:3]
summary(thedata$review_count)
thedata$review_count[1:5]
min(thedata$review_count)
min(thedata$friend_count)
summary(thedata$review_count)
a$breaks
a$breaks[1:4]
a$count[1:4]
